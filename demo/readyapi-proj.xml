<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="b055ac38-e8f8-413c-a2d5-2ebec33f4da1" created="2.6.0" activeEnvironment="Default environment" name="Project 1" resourceRoot="" updated="2.6.0 2019-01-14T14:47:06Z" xmlns:con="http://eviware.com/soapui/config">
  <con:settings/>
  <con:interface xsi:type="con:RestService" id="34ff6691-7132-4610-8bdf-ff83927be557" name="Identity" type="rest_ex" wadlVersion="https://swagger.io/swagger2/specification" definitionUrl="C:\Users\ryabat\Downloads\b2c\swagger.yaml" basePath="/FlexiGroup/Identity/1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:description xsi:nil="true"/>
    <con:settings/>
    <con:definitionCache type="TEXT" rootPart="file:/C:/Users/ryabat/Downloads/b2c/swagger.yaml">
      <con:part>
        <con:url>file:/C:/Users/ryabat/Downloads/b2c/swagger.yaml</con:url>
        <con:content>---
swagger: "2.0"
info:
  version: 1.0.0
  title: Identity
host: virtserver.swaggerhub.com
basePath: /FlexiGroup/Identity/1.0.0
schemes:
- https
paths:
  /auth/{version}:
    post:
      summary: Indicates, whether or not, the supplied credentials can be authenticated in an external database.
      operationId: 68d986d250be4d62a370dd52613e82a7
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/json
      parameters:
      - name: version
        in: path
        description: API version
        required: true
        type: string
        default: v1
        enum:
        - v1
      - name: username
        in: formData
        description: The username for authentication
        required: true
        type: string
      - name: password
        in: formData
        description: The password for authentication in clear text
        required: true
        type: string
      responses:
        200:
          description: authentication successful
        409:
          description: authentication failed
          schema:
            type: object
            properties:
              version:
                type: integer
              status:
                type: integer
              userMessage:
                type: string
                description: An error message that is shown to the user.
definitions:
  inline_response_409:
    properties:
      version:
        type: integer
      status:
        type: integer
      userMessage:
        type: string
        description: An error message that is shown to the user.</con:content>
        <con:type>https://swagger.io/swagger2/specification</con:type>
      </con:part>
    </con:definitionCache>
    <con:endpoints>
      <con:endpoint>https://virtserver.swaggerhub.com</con:endpoint>
    </con:endpoints>
    <con:resource name="/auth/{version}" path="/auth/{version}" id="de635c87-54f8-4479-a2a9-e239de243596">
      <con:settings/>
      <con:parameters>
        <con:parameter required="true">
          <con:name>version</con:name>
          <con:style>TEMPLATE</con:style>
          <con:default>v1</con:default>
          <con:description>API version</con:description>
        </con:parameter>
      </con:parameters>
      <con:method name="68d986d250be4d62a370dd52613e82a7" id="3798271d-6c44-481d-9f50-64234a88b56b" method="POST">
        <con:description>Indicates, whether or not, the supplied credentials can be authenticated in an external database.</con:description>
        <con:settings/>
        <con:parameters>
          <con:parameter required="true">
            <con:name>username</con:name>
            <con:style>QUERY</con:style>
            <con:description>The username for authentication</con:description>
          </con:parameter>
          <con:parameter required="true">
            <con:name>password</con:name>
            <con:style>QUERY</con:style>
            <con:description>The password for authentication in clear text</con:description>
          </con:parameter>
        </con:parameters>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json</con:mediaType>
          <con:status>409</con:status>
          <con:params/>
          <con:sampleContent>{
  "version" : 0,
  "status" : 0,
  "userMessage" : "string"
}</con:sampleContent>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/x-www-form-urlencoded</con:mediaType>
          <con:params/>
        </con:representation>
        <con:request name="Request 1" id="2b585d95-07b6-4ba5-8232-e9a2dfb804a5" mediaType="application/json">
          <con:settings/>
          <con:endpoint>https://virtserver.swaggerhub.com</con:endpoint>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
  </con:interface>
  <con:restMockService id="f8ced55b-2e81-4198-9c0d-9d12fb897be6" port="8089" path="/" host="localhost" name="IdentityService" responsePropertyExpansion="true" routeModeEnabled="false" routeUnmatchedOperation="false" addUnmatchedOperation="false">
    <con:settings/>
    <con:properties/>
    <con:constraints>
      <con:congestion>0</con:congestion>
      <con:inputBandwidth>-1</con:inputBandwidth>
      <con:outputBandwidth>-1</con:outputBandwidth>
      <con:maxThreadPoolCapacity>20</con:maxThreadPoolCapacity>
      <con:coreThreadPoolCapacity>5</con:coreThreadPoolCapacity>
      <con:virtError>
        <con:start>0</con:start>
        <con:endless>true</con:endless>
      </con:virtError>
    </con:constraints>
    <con:headerValidator type="NONE"/>
    <con:restMockAction name="auth" method="POST" resourcePath="/b2c/api/{version}/auth" id="eea2bab9-228f-4dac-bf4d-94d4453ffcaf">
      <con:settings/>
      <con:defaultResponse>200</con:defaultResponse>
      <con:dispatchStyle>SCRIPT</con:dispatchStyle>
      <con:dispatchConfig xsi:type="con:MockOperationQueryMatchDispatch" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
        <con:query>
          <con:name>username=test</con:name>
          <con:type>JSONPath</con:type>
          <con:response>409</con:response>
        </con:query>
      </con:dispatchConfig>
      <con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


*/
// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("username=good") )
{
    // return the name of the response you want to dispatch
    return "200"
}
 else if( requestBody.contains("username=bad") )
{
    // return the name of the response you want to dispatch
    return "409"
}</con:dispatchPath>
      <con:dispatchXPath/>
      <con:parameterDispatcherRuleContainer>
        <con:ParameterDispatcherRule>
          <con:ruleName>200</con:ruleName>
          <con:parameterDispatcherCondition>
            <con:parameterType>QUERY</con:parameterType>
            <con:parameterOperationType>EQUALS</con:parameterOperationType>
            <con:parameterName>username</con:parameterName>
            <con:parameterValue>good</con:parameterValue>
          </con:parameterDispatcherCondition>
          <con:responseName>200</con:responseName>
        </con:ParameterDispatcherRule>
        <con:ParameterDispatcherRule>
          <con:ruleName>409</con:ruleName>
          <con:parameterDispatcherCondition>
            <con:parameterType>QUERY</con:parameterType>
            <con:parameterOperationType>EQUALS</con:parameterOperationType>
            <con:parameterName>username</con:parameterName>
            <con:parameterValue>bad</con:parameterValue>
          </con:parameterDispatcherCondition>
          <con:responseName>409</con:responseName>
        </con:ParameterDispatcherRule>
      </con:parameterDispatcherRuleContainer>
      <con:routeEnabled>false</con:routeEnabled>
      <con:conditionalRoutingEnabled>true</con:conditionalRoutingEnabled>
      <con:routeScript/>
      <con:response name="200" id="1107b881-fe75-446c-8a97-255cda437c5e" httpResponseStatus="200" mediaType="application/json">
        <con:settings/>
        <con:responseContent/>
      </con:response>
      <con:response name="409" id="f96b30fb-0a69-41fb-9ef7-ba9ba194a482" httpResponseStatus="409" mediaType="application/json" compressedBodyContent="aced00057372002f636f6d2e657669776172652e736f617075692e696d706c2e737570706f72742e436f6d7072657373656456616c7565000b8b02c748eeab0200025a000a636f6d707265737365645b0004646174617400025b4278700070">
        <con:settings/>
        <con:responseContent>{
  "version" : "1.0.0",
  "status" : 409,
  "userMessage" : "auth failed"
}</con:responseContent>
      </con:response>
    </con:restMockAction>
  </con:restMockService>
  <con:properties/>
  <con:wssContainer/>
  <con:databaseConnectionContainer/>
  <con:jmsConnectionContainer/>
  <con:oAuth2ProfileContainer/>
  <con:oAuth1ProfileContainer/>
  <con:reporting>
    <con:xmlTemplates/>
    <con:parameters/>
  </con:reporting>
  <con:eventHandlers type="RequestFilter.filterRequest" name="RequestFilter.filterRequest">
    <con:script>// Sample event script to add custom HTTP header to all outgoing REST, SOAP and HTTP(S) calls
// This code is often used for adding custom authentication to SoapUI Pro tests

// If hardcoding the token, uncomment and change line 5
// def token = '4567'

// If your token is parameterized in Project level custom property, uncomment line 8
// def token = request.parent.testCase.testSuite.project.getProperty('auth_token').getValue()

// To modify all outgoing calls, remove comments from lines 11 to 16
// def headers = request.requestHeaders
// if (headers.containsKey('auth_token2') == false) {
//   headers.put('auth_token2', token)
//   request.requestHeaders = headers
// }</con:script>
  </con:eventHandlers>
  <con:eventHandlers type="TestRunListener.afterStep" name="TestRunListener.afterStep">
    <con:script>// Save all test step results into files
// Change the directory path in line 5 to a location where you want to store details
// then uncomment lines 5 to 10

// filePath = 'C:\\tempOutputDirectory\\'
// fos = new FileOutputStream(filePath + testStepResult.testStep.label + '.txt', true)
// pw = new PrintWriter(fos)
// testStepResult.writeTo(pw)
// pw.close()
// fos.close()</con:script>
  </con:eventHandlers>
  <con:authRepository/>
  <con:tags/>
</con:soapui-project>
